-- 1. Create USERS table (no dependencies)
CREATE TABLE USERS (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    phone_number VARCHAR(20),
    role VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2. Create CUSTOMERS table (no dependencies)
CREATE TABLE CUSTOMERS (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone_number VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 3. Create PRODUCT_CATEGORIES table (no dependencies)
CREATE TABLE PRODUCT_CATEGORIES (
    category_id INT AUTO_INCREMENT PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL,
    description TEXT
);

-- 4. Create SUPPLIERS table (no dependencies)
CREATE TABLE SUPPLIERS (
    supplier_id INT AUTO_INCREMENT PRIMARY KEY,
    supplier_name VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 5. Create PRODUCTS table (depends on PRODUCT_CATEGORIES)
CREATE TABLE PRODUCTS (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    category_id INT,
    product_name VARCHAR(100) NOT NULL,
    description TEXT,
    unit_price DECIMAL(10, 2) NOT NULL,
    current_stock INT NOT NULL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES PRODUCT_CATEGORIES(category_id)
);

-- 6. Create SUPPLIER_CONTACTS table (depends on SUPPLIERS)
CREATE TABLE SUPPLIER_CONTACTS (
    contact_id INT AUTO_INCREMENT PRIMARY KEY,
    supplier_id INT,
    contact_person VARCHAR(100) NOT NULL,
    phone_number VARCHAR(20),
    FOREIGN KEY (supplier_id) REFERENCES SUPPLIERS(supplier_id) ON DELETE CASCADE
);

-- 7. Create SALES table (depends on CUSTOMERS and USERS)
CREATE TABLE SALES (
    sales_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    sold_by_user_id INT,
    sale_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    subtotal DECIMAL(10, 2) NOT NULL,
    tax_amount DECIMAL(10, 2) NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    payment_status VARCHAR(50) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id),
    FOREIGN KEY (sold_by_user_id) REFERENCES USERS(user_id)
);

-- 8. Create SALES_ITEMS table (depends on SALES and PRODUCTS)
CREATE TABLE SALES_ITEMS (
    sales_item_id INT AUTO_INCREMENT PRIMARY KEY,
    sales_id INT,
    product_id INT,
    quantity_sold INT NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL,
    item_total DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (sales_id) REFERENCES SALES(sales_id),
    FOREIGN KEY (product_id) REFERENCES PRODUCTS(product_id)
);

-- 9. Create RETURNS_ table (depends on SALES_ITEMS)
CREATE TABLE RETURNS_ (
    return_id INT AUTO_INCREMENT PRIMARY KEY,
    sales_item_id INT,
    quantity_returned INT NOT NULL,
    return_reason TEXT,
    refund_amount DECIMAL(10, 2) NOT NULL,
    return_status VARCHAR(50) NOT NULL,
    return_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sales_item_id) REFERENCES SALES_ITEMS(sales_item_id)
);

-- 10. Create INVENTORY_ALERTS table (depends on PRODUCTS)
CREATE TABLE INVENTORY_ALERTS (
    alert_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT,
    alert_type VARCHAR(50) NOT NULL,
    threshold_quantity INT NOT NULL,
    is_active TINYINT(1) DEFAULT TRUE,
    is_acknowledged TINYINT(1) DEFAULT FALSE,
    alert_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES PRODUCTS(product_id)
);


-- 11. Create PURCHASE_ORDERS table (depends on SUPPLIERS and PRODUCTS)
CREATE TABLE PURCHASE_ORDERS (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    supplier_id INT,
    product_id INT,
    quantity_ordered INT NOT NULL,
    order_status VARCHAR(50) NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (supplier_id) REFERENCES SUPPLIERS(supplier_id),
    FOREIGN KEY (product_id) REFERENCES PRODUCTS(product_id)
);